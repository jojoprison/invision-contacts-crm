name: Django CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  lint:
    name: Проверка кода
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Установка Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Кеширование зависимостей Poetry
        id: cache-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          
      - name: Установка зависимостей
        run: poetry install --with dev

      - name: Проверка синтаксиса с Flake8
        run: poetry run flake8 src

      - name: Проверка безопасности с Bandit
        run: poetry run bandit -r src/ -c .bandit

  test:
    name: Тестирование
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_crm_test
        ports:
          - 5432:5432
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Установка Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Кеширование зависимостей Poetry
        id: cache-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          
      - name: Установка зависимостей
        run: poetry install --with dev

      - name: Выполнение тестов с проверкой покрытия
        env:
          ENV_TYPE: ci
          SECRET_KEY: django-insecure-ci-test-key
          DEBUG: 1
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/contacts_crm_test
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/1
          TENANT_SCHEMA_PREFIX: contact_
        run: |
          cd src
          poetry run pytest ../src/tests/ --cov=contacts --cov=tenants --cov-report=xml --cov-report=term-missing --cov-fail-under=80
          poetry run python manage.py setup_environment --no-input

  build:
    name: Сборка Docker образа
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Вход в Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Извлечение метаданных для Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}

      - name: Сборка и публикация образа
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
