name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  lint:
    name: Проверка кода
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install poetry
          poetry install --only dev

      - name: Проверка синтаксиса с Flake8
        run: flake8 src

      - name: Проверка форматирования с Black
        run: black --check src

      - name: Проверка импортов с isort
        run: isort --check-only --profile black src

  test:
    name: Тестирование
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: contacts_crm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Установка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Выполнение тестов
        env:
          ENV_TYPE: ci
          SECRET_KEY: django-insecure-ci-test-key
          DEBUG: 1
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/contacts_crm_test
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/1
          TENANT_SCHEMA_PREFIX: contact_
        run: |
          cd src
          python manage.py test
          python manage.py setup_environment --no-input

  build:
    name: Сборка образа
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Авторизация в GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Извлечение метаданных для образа
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Сборка и публикация Docker образа
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Деплой на Dev
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment:
      name: dev
    steps:
      - name: Деплой на Dev сервер
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /path/to/dev/app
            docker-compose pull
            docker-compose down
            docker-compose up -d

  deploy-production:
    name: Деплой на Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
    steps:
      - name: Деплой на Production сервер
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /path/to/production/app
            docker-compose pull
            docker-compose down
            docker-compose up -d
